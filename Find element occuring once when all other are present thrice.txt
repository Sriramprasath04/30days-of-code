//{ Driver Code Starts
//Initial Template for JAVA

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N = Integer.parseInt(read.readLine());
            
            String S[] = read.readLine().split(" ");
            
            int[] arr = new int[N];
            
            for(int i=0 ; i<N ; i++)
                arr[i] = Integer.parseInt(S[i]);

            Solution ob = new Solution();
            System.out.println(ob.singleElement(arr,N));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static int singleElement(int[] arr , int N) {
        // code here
        // sort(arr, 0, N-1);
        Arrays.sort(arr);
        int count = 1;
        if(N == 1){
            return arr[0];
        }
        
        if(arr[N-1]!=arr[N-2]){
            return arr[N-1];
        }
        
        for(int i=0 ; i<N-1 ;i++){
            if(arr[i] == arr[i+1]){
                count++;
            } else {
                if(count == 3){
                    count = 1;
                } else {
                    return arr[i];
                }
            }
        }
        return -1;
    }
    
    static void sort(int[] arr,int l, int h){
        if( l>=h ){
            return;
        }
        
        int mid = (l+h)/2;
        sort(arr, l, mid);
        sort(arr, mid+1, h);
        merge(arr, l, mid, h);
    }
    
    static void merge(int[] arr, int l, int mid, int h){
        int i = l;
        int j = mid+1;
        List<Integer> lis = new ArrayList<>();
        while(i<=mid && j<=h){
            if(arr[i]<=arr[j]){
                lis.add(arr[i]);
                i++;
            } else {
                lis.add(arr[j]);
                j++;
            }
        }
        
        while(i<=mid){
            lis.add(arr[i]);
            i++;
        }
        
        while(j<=h){
            lis.add(arr[j]);
            j++;
        }
        
        for(int k=l; k<=h ;k++){
            arr[k] = lis.get(k-l);
        }
    }
}
